services:
  db:
    image: postgres:15-alpine
    env_file:
      - .env
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}']
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - teamtrack_pgdata:/var/lib/postgresql/data
    restart: unless-stopped

  app:
    # Use CI-built image (GHCR) for faster, reproducible deploys. CI should set IMAGE_TAG.
    image: ghcr.io/${GITHUB_OWNER:-moh92ahm}/${APP_NAME:-team-track}:${IMAGE_TAG:-dev-latest}
    env_file:
      - .env
    environment:
      - PORT=3000
      - HOST=0.0.0.0
      - NODE_ENV=production
      - HOME=/app
      - TMPDIR=/tmp
      - USER=nextjs
      - MEDIA_DIR=/app/public/media
    depends_on:
      db:
        condition: service_healthy
    expose:
      - '3000'
    volumes:
      - teamtrack_media:/app/public/media
    restart: unless-stopped
    healthcheck:
      test: ['CMD-SHELL', 'wget -qO- http://localhost:3000/ || exit 1']
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  migrate:
    image: ghcr.io/${GITHUB_OWNER:-moh92ahm}/${APP_NAME:-team-track}:${IMAGE_TAG:-dev-latest}
    env_file:
      - .env
    environment:
      - NODE_ENV=production
    depends_on:
      db:
        condition: service_healthy
    command: sh -lc "pnpm payload migrate"
    restart: 'no'

  nginx:
    image: nginx:stable-alpine
    volumes:
      - ./nginx-dev.conf:/etc/nginx/conf.d/default.conf:ro
      - ./certs-dev:/etc/letsencrypt:ro
    ports:
      - '80:80'
      - '443:443'
    depends_on:
      - app
    restart: unless-stopped

volumes:
  teamtrack_pgdata:
  teamtrack_media:

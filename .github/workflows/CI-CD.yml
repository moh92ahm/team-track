name: CI Build and Deploy (GHCR)
on:
  push:
    branches:
      - main
      - dev
permissions:
  contents: read
  packages: write
  id-token: write
env:
  APP_NAME: team-track
jobs:
  build-and-push:
    runs-on: ubuntu-latest
    outputs:
      image: ${{ steps.meta.outputs.image }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: '22'
      - name: Enable Corepack & pnpm
        run: |
          corepack enable
          corepack prepare pnpm@latest --activate
      - name: Ensure pnpm executable (install fallback)
        run: |
          if ! command -v pnpm >/dev/null 2>&1; then
            echo "pnpm not found â€” installing globally via npm"
            npm install -g pnpm@latest
          else
            echo "pnpm already available"
          fi

      # Decode real .env from base64 secret for build
      - name: Setup environment file
        run: |
          if [ "${{ github.ref_name }}" = "main" ]; then
            if [ -n "${{ secrets.PROD_ENV }}" ]; then
              echo -n "${{ secrets.PROD_ENV }}" | base64 --decode > .env
              echo "Production environment file created"
            else
              echo "ERROR: PROD_ENV secret not set" >&2
              exit 1
            fi
          else
            if [ -n "${{ secrets.DEV_ENV }}" ]; then
              echo -n "${{ secrets.DEV_ENV }}" | base64 --decode > .env
              echo "Development environment file created"
            else
              echo "ERROR: DEV_ENV secret not set" >&2
              exit 1
            fi
          fi
          chmod 600 .env

      - name: Install dependencies
        run: |
          corepack enable
          pnpm install --frozen-lockfile
      - name: Build
        run: pnpm run build
        env:
          NODE_ENV: production
          SKIP_DB_CONNECTION: 'true'
          # Provide mock DATABASE_URI to prevent connection errors during build
          DATABASE_URI: 'postgresql://user:password@localhost:5432/mockdb'
      - name: Log into GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push image
        id: meta
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          no-cache: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/${{ env.APP_NAME }}:${{ github.ref_name }}-${{ github.sha }}
            ghcr.io/${{ github.repository_owner }}/${{ env.APP_NAME }}:${{ github.ref_name }}-latest

      - name: Set output image
        run: echo "IMAGE=ghcr.io/${{ github.repository_owner }}/${{ env.APP_NAME }}:${{ github.ref_name }}-${{ github.sha }}" >> $GITHUB_OUTPUT

  deploy-dev:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref_name == 'dev'
    steps:
      - name: Deploy to Development Server
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.DEV_SSH_HOST }}
          username: ${{ secrets.DEV_SSH_USER }}
          key: ${{ secrets.DEV_PRIVATE_KEY }}
          port: ${{ secrets.DEV_SSH_PORT }}
          script: |
            set -euo pipefail
            cd ${{ secrets.DEV_DEPLOY_PATH }}

            # Update git repository to latest commit
            echo "Updating git repository to latest commit..."
            git fetch origin dev
            git reset --hard origin/dev

            # Set environment variables for docker-compose
            IMAGE_TAG="dev-${{ github.sha }}"
            GITHUB_OWNER="${{ github.repository_owner }}"
            APP_NAME="${{ env.APP_NAME }}"
            IMAGE="ghcr.io/$GITHUB_OWNER/$APP_NAME:$IMAGE_TAG"

            echo "Using IMAGE_TAG: $IMAGE_TAG"
            echo "Using IMAGE: $IMAGE"

            # Create environment file from DEV_ENV secret
            echo "Creating environment file from DEV_ENV secret..."
            echo -n "${{ secrets.DEV_ENV }}" | base64 --decode > .env
            chmod 600 .env

            # Export environment variables for docker-compose
            export IMAGE_TAG GITHUB_OWNER APP_NAME

            # Login to registry
            echo "Logging into GHCR..."
            echo -n "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u "${{ github.actor }}" --password-stdin

            echo "Pulling image $IMAGE"
            docker pull "$IMAGE"

            # Ensure DB is up, then run migrations via compose
            echo "Bringing up database..."
            docker compose -f docker-compose-dev.yml up -d db

            echo "Running database migrations (docker-compose migrate)..."
            if docker compose -f docker-compose-dev.yml run --rm migrate; then
              echo "Migrations completed"
            else
              echo "Migrations failed! Aborting deployment."
              exit 1
            fi

            # Start app and nginx
            echo "Starting services with docker-compose-dev.yml..."
            docker compose -f docker-compose-dev.yml up -d --remove-orphans

            # Restart nginx to clear DNS cache for new app container IP
            echo "Restarting nginx to refresh DNS cache..."
            docker compose -f docker-compose-dev.yml restart nginx || echo "Nginx restart failed, but continuing..."

            # Cleanup old images
            echo "Cleaning up old Docker images..."
            docker image prune -af --filter "until=24h"

  deploy-prod:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref_name == 'main'
    steps:
      - name: Deploy to Production Server
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.PROD_SSH_HOST }}
          username: ${{ secrets.PROD_SSH_USER }}
          key: ${{ secrets.PROD_PRIVATE_KEY }}
          port: ${{ secrets.PROD_SSH_PORT }}
          script: |
            set -euo pipefail
            cd ${{ secrets.PROD_DEPLOY_PATH }}

            # Update git repository to latest commit
            echo "Updating git repository to latest commit..."
            git fetch origin main
            git reset --hard origin/main

            # Set environment variables for docker-compose
            IMAGE_TAG="main-${{ github.sha }}"
            GITHUB_OWNER="${{ github.repository_owner }}"
            APP_NAME="${{ env.APP_NAME }}"
            IMAGE="ghcr.io/$GITHUB_OWNER/$APP_NAME:$IMAGE_TAG"

            echo "Using IMAGE_TAG: $IMAGE_TAG"
            echo "Using IMAGE: $IMAGE"

            # Create environment file from PROD_ENV secret
            echo "Creating environment file from PROD_ENV secret..."
            echo -n "${{ secrets.PROD_ENV }}" | base64 --decode > .env
            chmod 600 .env

            # Export environment variables for docker-compose
            export IMAGE_TAG GITHUB_OWNER APP_NAME

            # Login to registry
            echo "Logging into GHCR..."
            echo -n "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u "${{ github.actor }}" --password-stdin

            echo "Pulling image $IMAGE"
            docker pull "$IMAGE"

            # Ensure DB is up, then run migrations via compose
            echo "Bringing up database..."
            docker compose -f docker-compose-prod.yml up -d db

            echo "Running database migrations (docker-compose migrate)..."
            if docker compose -f docker-compose-prod.yml run --rm migrate; then
              echo "Migrations completed"
            else
              echo "Migrations failed! Aborting deployment."
              exit 1
            fi

            # Start app and nginx
            echo "Starting services with docker-compose-prod.yml..."
            docker compose -f docker-compose-prod.yml up -d --remove-orphans

            # Restart nginx to clear DNS cache for new app container IP
            echo "Restarting nginx to refresh DNS cache..."
            docker compose -f docker-compose-prod.yml restart nginx || echo "Nginx restart failed, but continuing..."

            # Cleanup old images
            echo "Cleaning up old Docker images..."
            docker image prune -af --filter "until=24h"

            echo "Production deployment completed successfully!"
